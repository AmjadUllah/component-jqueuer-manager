tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/master/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    jqueuer_agent:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         environment:
           JQ_SERVER: <JQUEUER_IP>
         deploy:
           mode: global
         networks: [ 'bridge' ]
         entrypoint: sh -c 'python3 jqueuer_agent.py $$(cat /etc/nodehostname)'
         volumes:
           - /var/run/docker.sock:/var/run/docker.sock
           - /usr/bin/docker:/usr/bin/docker
           - /etc/hostname:/etc/nodehostname

      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: jaydes/jqueuer_agent:sleep
         repository: docker_hub

    <SERVICE_NAME>:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         deploy:
           resources:
             reservations:
               cpus: "<RES_CPU>"
         stop_grace_period: "<DURATION>s"
         tty: true
         networks: [ 'bridge' ]
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: <DOCKER_IMAGE>
         repository: docker_hub

    worker_node:
      type: tosca.nodes.MiCADO.Occopus.CloudSigma.Compute
      properties:
        cloud:
          interface_cloud: cloudsigma
          endpoint_cloud: https://direct.zrh.cloudsigma.com/api/2.0
      capabilities:
        host:
          properties:
            num_cpus: <WORK_CPU>
            mem_size: <WORK_MEM>
            vnc_password: secret
            libdrive_id: 837e9690-d1ae-4ad7-a7fb-895fabe88ec5
            public_key_id: <PUB_KEY_ID>
    bridge:
      type: tosca.nodes.MiCADO.network.Network.Docker
      properties:
        external: True

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker_node ]
        properties:
          sources:
          - '<JQUEUER_IP>:9102'
          constants:
            AET: <DURATION>
            TTC: <DEADLINE>
            MAXNODES: <NODES_MAX>
            MAXCONTAINERS: <CONTAINERS_MAX>
          queries:
            TIMENOW: 'time()'
            FIRSTJOB: 'min(jqueuer_job_running_timestamp{experiment_id="<EXPID>"})'
            JOBSRUN: 'count(jqueuer_job_running{experiment_id="<EXPID>"} == 1)'
            START: 'jqueuer_experiment_adding_timestamp{experiment_id="<EXPID>"}'
            ITEMS: 'count(jqueuer_job_added{experiment_id="<EXPID>"})'
            COMPLETED: 'count(jqueuer_task_accomplished{experiment_id="<EXPID>"} == 1)'
            CALC_AET: 'AVG(jqueuer_task_accomplished_duration{experiment_id="<EXPID>"})'
          min_instances: 1
          max_instances: '{{MAXNODES}}'
          scaling_rule: |
            reqnodes=0
            REMAININGTIME = START+TTC-TIMENOW
            if not FIRSTJOB:
              FIRSTJOB = START+180
            if CALC_AET:
              AET = CALC_AET
              ITEMS -= COMPLETED
            else:
              AET = max(TIMENOW-FIRSTJOB, AET)
            if not JOBSRUN:
              JOBSRUN = 0
            if ITEMS>0 and ITEMS<=JOBSRUN:
              m_node_count = m_node_count
            elif ITEMS>0:
              reqconts = max(ITEMS, min(MAXCONTAINERS, ceil(AET/((REMAININGTIME-AET*0.20)/ITEMS))))
              reqnodes = ceil(reqconts/4)
              if reqnodes>m_node_count:
                m_node_count = min(reqnodes, MAXNODES)
              if REMAININGTIME>AET*1.5:
                if reqnodes<m_node_count-1:
                  m_node_count = max(1, reqnodes)
            else:
              m_node_count = 0
            print "Number of required nodes:",reqnodes
            print "Number of requested nodes:",m_node_count

    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ <SERVICE_NAME> ]
        properties:
          min_instances: 1
          max_instances: '{{MAXCONTAINERS}}'
          scaling_rule: |
            REMAININGTIME = START+TTC-TIMENOW
            if not FIRSTJOB:
              FIRSTJOB = START+180
            if CALC_AET:
              AET = CALC_AET
              ITEMS -= COMPLETED
            else:
              AET = max(TIMENOW-FIRSTJOB, AET)
            if not JOBSRUN:
              JOBSRUN = 0
            print "AET:",AET
            print "Remaining time:", REMAININGTIME
            print "Length of queue:",ITEMS
            required_count = 0
            if ITEMS>0 and ITEMS<=JOBSRUN:
              m_container_count = m_container_count
            elif ITEMS>0:
              required_count = max(ITEMS, min(MAXCONTAINERS, ceil(AET/((REMAININGTIME-AET*0.20)/ITEMS))))
              if REMAININGTIME>AET*1.5:
                if required_count<m_container_count-3:
                  m_container_count = min(required_count, len(m_nodes) * 4)
              if required_count>m_container_count:
                m_container_count = min(required_count, len(m_nodes) * 4)
            else:
              m_container_count = 0
            print "Number of required containers:",required_count
            print "Number of requested containers:",m_container_count
